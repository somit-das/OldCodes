package org.jsp.thirteen_boot.controller;

import java.util.List;
import java.util.Optional;

import org.jsp.thirteen_boot.entity.Person;
import org.jsp.thirteen_boot.repository.PersonRepository;
import org.jsp.thirteen_boot.responsestructure.ResponseStructure;
import org.jsp.thirteen_boot.service.PersonService;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class PersonController {
	
//	@Autowired
//	PersonRepository repos;
	
	@Autowired
	private PersonService service;
	
	@PostMapping("/persons")
	public ResponseStructure<Person> savePersonController(@RequestBody Person person) {
		
//		repos.save(person);
//		ResponseStructure<Person> structure =  new ResponseStructure<>();
//		structure.setStatus(201);
//		structure.setMessage("Person Saved Successfully");
//		structure.setBody(person);
//		return structure;
		
		return service.savePersonService(person);
	}
	
	@GetMapping("/persons")
	public ResponseStructure<List<Person>> findAllUsersController() {
//		List<Person> pl = repos.findAll();
//		ResponseStructure<List<Person>> structure =  new ResponseStructure<>();
//		if(pl.isEmpty()) {
//			structure.setStatus(404);
//			structure.setMessage("No Users Found");
//			structure.setBody(null);
//			return structure;
//			
//		}else {
//			structure.setStatus(200);
//			structure.setMessage("Query Executed Successfully");
//			structure.setBody( pl);
//			return structure;
//		}
		
		return service.findAllUsersService();
	}
	
	
	@GetMapping("/persons/{id}")
	public ResponseStructure<Object> findUserByIdController(@PathVariable int id) {
//		Optional<Person> op =repos.findById(id);
//		ResponseStructure<Object> structure = new ResponseStructure<>();
//		if(op.isPresent()) {
//			Person p= op.get();
//			structure.setStatus(200);
//			structure.setMessage("Found Person Successfully");
//			structure.setBody(p);
//			return structure;
//			
//		}
//		else {
//			
//			structure.setStatus(404);
//			structure.setMessage("No Person Found");
//			structure.setBody(null);
//			return structure;
//		}
		return service.findUserByIdService(id);
		
	}

	@GetMapping("/persons")
	public ResponseStructure<Person> findUserByNameController(@RequestParam String name){ //java.lang.IllegalStateException: Ambiguous handler methods mapped for '/persons/smith': {public org.jsp.thirteen_boot.responsestructure.ResponseStructure org.jsp.thirteen_boot.controller.PersonController.findUserByNameIdController(int), public org.jsp.thirteen_boot.responsestructure.ResponseStructure org.jsp.thirteen_boot.controller.PersonController.findUserByIdController(int)}

		return null;
	}
	
	
	@GetMapping("/persons/{email}/{password}")
	public ResponseStructure<Person> findPersonByEmailAndPassWordController(@PathVariable String email,@PathVariable String password){
		
		return service.findPersonByEmailAndPassWordService(email, password);
	}
	
	
	@DeleteMapping("/persons")
	public ResponseStructure<String> deleteUserByIdController(@RequestParam int id) {
//		Optional<Person> op =repos.findById(id);
//		ResponseStructure<String> structure = new ResponseStructure<>();
//		
//		if(op.isPresent()) {
//			Person p = op.get();
//			repos.deleteById(id);
//			op=repos.findById(id);
//			if(op.isEmpty()) {
//				structure.setStatus(200);
//				structure.setMessage("Deleted  Successfully");
//				structure.setBody("Person Deleted");
//				return structure;
//			}else {
//				structure.setStatus(500);
//				structure.setMessage("Deletion Operation performed Unsuccesfully");
//				structure.setBody("No Person Found");
//				return structure;
//			}
//		}
//		else {
//			structure.setStatus(404);
//			structure.setMessage("No Users Found");
//			structure.setBody("No Person is there to delete");
//			return structure;
//		}
		return service.deleteUserByIdService(id);
	}
	
	@PutMapping("/persons")
	public ResponseStructure<Person> updatePersonController(@RequestBody Person person){
		
//		repos.save(person);
//		ResponseStructure<Person> structure =  new ResponseStructure<>();
//		structure.setStatus(201);
//		structure.setMessage("Person Updated Successfully");
//		structure.setBody(person);
		return service.updatePersonService(person);
	}
	
	
	
	
}

	
