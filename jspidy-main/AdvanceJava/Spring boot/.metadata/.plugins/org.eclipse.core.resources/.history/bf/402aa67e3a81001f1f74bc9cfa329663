package org.jsp.fifteenboot_eventmgmt.service;

import java.util.List;
import java.util.Optional;

import org.jsp.fifteenboot_eventmgmt.dao.EventDao;
import org.jsp.fifteenboot_eventmgmt.entity.Event;
import org.jsp.fifteenboot_eventmgmt.responsestructure.ResponseStructure;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestBody;

@Component
public class EventService {
	@Autowired
	private EventDao dao;
	
//	postmap /events 
//	@PostMapping("/events")
	public ResponseStructure<Event> saveEvent(@RequestBody Event e){
		ResponseStructure<Event> structure = new ResponseStructure<>();
		Event nEvent = dao.saveEvent(e);
		if(nEvent != null) {
			structure.setStatus(201);
			structure.setMessage("New Event Added...");
			structure.setBody(nEvent);
			return structure;
		}
		structure.setStatus(500);
		structure.setMessage("New Event Adding Failed...");
		structure.setBody(null);
		return structure;
	}
	
//	putmap /events @Requstboty id
//	@PutMapping("/events/{id}")
	public ResponseStructure<Event> updateEvent(int id,  Event e){
		ResponseStructure<Event> structure = new ResponseStructure<>();
		Optional<Event> optional = dao.findEventById(id);
		if(optional.isPresent()) {
			Event oEvent = optional.get();
			if(e.getTitle()!=null)
			{
			oEvent.setTitle(e.getTitle());
			}
			if(e.getPlace()!=null) {
			oEvent.setPlace(e.getPlace());
			}
			if(e.getDate()!=null) {
			oEvent.setDate(e.getDate());
			}
			if(e.getStatus()!=null) {
			oEvent.setStatus(e.getStatus());
			}
			
			
			dao.saveEvent(oEvent);
			structure.setStatus(201);
			structure.setMessage("Event Updated Successfully...");
			structure.setBody(oEvent);
			return structure;
			
		}else {
			structure.setStatus(404);
			structure.setMessage("No Event Found...");
			structure.setBody(null);
			return structure;
		}
		
	}
//	gm /events/name/{name}
//	@GetMapping("/events/name/{name}")
	public ResponseStructure<Event> retrieveEventByName( String name){
		ResponseStructure<Event> structure = new ResponseStructure<>();
		Optional<Event> optional = dao.findEventByTitle(name);
		if(optional.isPresent()) {
			structure.setStatus(200);
			structure.setMessage("Event Found ....");
			structure.setBody(optional.get());
			return structure;
		}
		else {
			structure.setStatus(404);
			structure.setMessage("No Event Found By this Name");
			structure.setBody(null);
			return structure;
		}
	
	}
//	gm /events/upcoming
//	@GetMapping("/events/upcoming")
	public ResponseStructure<List<Event>> upcomingEvents(){
		ResponseStructure<List<Event>> structure = new ResponseStructure<>();
		List<Event> eL = dao.findUpcomingEvents();
		if(eL.size()<1) {
			structure.setStatus(HttpStatus.NOT_FOUND.value());
			structure.setMessage("NO Upcoming Events Found...");
			structure.setBody(eL);
			return structure;
		}
		structure.setStatus(HttpStatus.OK.value());
		structure.setMessage("List Of Upcoming Event Found...");
		structure.setBody(eL);
		return structure;
		
	}
//	gm /events/ongoing
//	@GetMapping("/events/ongoing") 
	public ResponseStructure<List<Event>> ongoingEvents(){
		ResponseStructure<List<Event>> structure = new ResponseStructure<>();
		List<Event> eL = dao.findOngoingEvents();
		if(eL.size()<1) {
			structure.setStatus(HttpStatus.NOT_FOUND.value());
			structure.setMessage("NO Ongoing Events Found...");
			structure.setBody(eL);
			return structure;
		}
		structure.setStatus(HttpStatus.OK.value());
		structure.setMessage("List Of Ongoing Event Found...");
		structure.setBody(eL);
		return structure;
	}
//	gm /events/completed
//	@GetMapping("/events/completed")
	public ResponseStructure<List<Event>> completedEvents(){
		ResponseStructure<List<Event>> structure = new ResponseStructure<>();
		List<Event> eL = dao.findCompletedEvents();
		if(eL.size()<1) {
			structure.setStatus(HttpStatus.NOT_FOUND.value());
			structure.setMessage("NO Completed Events Found...");
			structure.setBody(eL);
			return structure;
		}
		structure.setStatus(HttpStatus.OK.value());
		structure.setMessage("List Of Completed Event Found...");
		structure.setBody(eL);
		return structure;
	}
//	gm /events
//	@GetMapping("/events")
	public ResponseStructure<List<Event>> retrieveAllEvents(){
		ResponseStructure<List<Event>> structure = new ResponseStructure<>();
		List<Event> eL = dao.findAllEvent();
		if(eL.size()<1) {
			structure.setStatus(404);
			structure.setMessage("No Event Found By this Id");
			structure.setBody(null);
			return structure;
		}else {
			structure.setStatus(200);
			structure.setMessage("Event Found By Given Id Successfully...");
			structure.setBody(eL);
			return structure;
		}
	}
//	getmap / events/{id}
//	@GetMapping("/events/{id}")
	public ResponseStructure<Event> retrieveEventById( int id){
		ResponseStructure<Event> structure = new ResponseStructure<>();
		Optional<Event> optional = dao.findEventById(id);
		if(optional.isEmpty()) {
			structure.setStatus(404);
			structure.setMessage("No Event Found By this Id");
			structure.setBody(null);
			return structure;
		}else {
			structure.setStatus(200);
			structure.setMessage("Event Found By Given Id Successfully...");
			structure.setBody(optional.get());
			return structure;
		}
		
	}
	
//	dm /event/{id}
//	@DeleteMapping("/events/{id}")
	public ResponseStructure<String> deleteEvent(int id){
		Optional<Event> optional = dao.findEventById(id);
		ResponseStructure<String> structure = new ResponseStructure<>();
		
		if(optional.isEmpty()) {
			structure.setStatus(404);
			structure.setMessage("No Event Found By this Id");
			structure.setBody("Delete Operation Failed");
			return structure;
		}else {
			dao.deleteEvent(id);
			optional=dao.findEventById(id);
			if(optional.isPresent()) {
				structure.setStatus(500);
				structure.setMessage("Unable to Delete Event");
				structure.setBody("Delete Operation performed Unsuccessfully");
				return structure;
			}
		}
		return null;
	}
}
